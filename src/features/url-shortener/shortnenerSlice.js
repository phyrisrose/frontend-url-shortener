import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { shortenUrl } from "./shortenerAPI";

const initialState = {
  shortUrl: "",
  loading: false,
};

export const shortenAsync = createAsyncThunk(
  "shortner/shorten",
  async (longUrl) => {
    const response = await shortenUrl(longUrl);
    return response.data; /** @todo make sure it's indeed .data */
  }
);

export const shortenerSlice = createSlice({
  name: "shortner",
  initialState,
  reducers: {
    /** @todo might not need this */
    // shorten: (state, action) => {
    //   // Redux Toolkit allows us to write "mutating" logic in reducers. It
    //   // doesn't actually mutate the state because it uses the Immer library,
    //   // which detects changes to a "draft state" and produces a brand new
    //   // immutable state based off those changes
    //   state.value += action.payload;
    // },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(shortenAsync.pending, (state) => {
        state.loading = true;
      })
      .addCase(shortenAsync.fulfilled, (state, action) => {
        state.loading = false;
        state.shortUrl =
          action.payload; /** @todo check that the right payload is being saved. */
      });
  },
});

export default shortenerSlice.reducer;
